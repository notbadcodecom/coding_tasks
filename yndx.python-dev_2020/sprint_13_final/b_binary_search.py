# Алла ошиблась со структурой данных. Она решила хранить массив в кольцевом
# буфере. Проблема в том, что массив был отсортирован. И в нем можно было
# искать элемент за логарифмическое время. Алла скопировала данные из
# кольцевого буфера а обычный массив. Но он больше не является отсортированным.
# Тем не менее нужно обеспечить возможность находить в нем элемент за O(logn).
#
# Формат ввода
# В первой строке записано число n - длина массива.
# Во второй строке записано положительное число k - искомый элемент.
# n и k не превосходят 1000.
# Далее в строку через пробел записаны n положительных чисел, каждое из которых
# не превосходит 1000.
#
# Формат вывода
# Выведите индекс искомого элемента в массиве, если он найден.
# Иначе выведите -1.
#
# Примечания
# Можно предполагать, что в массиве только уникальные элементы. Сортировать
# массив нельзя. Объем дополнительной памяти, помимо массива, в который
# считываются данные, O(1).

def get_index(k, array, end, start=0):
    midpoint = (start + end) // 2
    if array[midpoint] == k:
        return midpoint
    elif array[start] <= k < array[midpoint]:
        end = midpoint - 1
    elif array[midpoint] < k <= array[end]:
        start = midpoint + 1
    elif array[midpoint] < array[start]:
        end = midpoint - 1
    elif array[midpoint] > array[end]:
        start = midpoint + 1
    else:
        return -1
    return get_index(k, array, end, start)


n = int(input())
k = int(input())
array = [int(i) for i in input().split(' ')]
print(get_index(k, array, n - 1))
